// Code generated by MockGen. DO NOT EDIT.
// Source: internal/structure/domain/ports/in/structure.go
//
// Generated by this command:
//
//	mockgen -source=internal/structure/domain/ports/in/structure.go -destination=test/mocks/structure/domain/ports/in/structure_mock.go -package=mock_in
//

// Package mock_in is a generated GoMock package.
package mock_in

import (
	context "context"
	model "ftd-td-catalog-item-read-services/internal/structure/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockItemStructureService is a mock of ItemStructureService interface.
type MockItemStructureService struct {
	ctrl     *gomock.Controller
	recorder *MockItemStructureServiceMockRecorder
	isgomock struct{}
}

// MockItemStructureServiceMockRecorder is the mock recorder for MockItemStructureService.
type MockItemStructureServiceMockRecorder struct {
	mock *MockItemStructureService
}

// NewMockItemStructureService creates a new mock instance.
func NewMockItemStructureService(ctrl *gomock.Controller) *MockItemStructureService {
	mock := &MockItemStructureService{ctrl: ctrl}
	mock.recorder = &MockItemStructureServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemStructureService) EXPECT() *MockItemStructureServiceMockRecorder {
	return m.recorder
}

// GetItemStructure mocks base method.
func (m *MockItemStructureService) GetItemStructure(ctx context.Context, countryID, itemID string) ([]model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemStructure", ctx, countryID, itemID)
	ret0, _ := ret[0].([]model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemStructure indicates an expected call of GetItemStructure.
func (mr *MockItemStructureServiceMockRecorder) GetItemStructure(ctx, countryID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemStructure", reflect.TypeOf((*MockItemStructureService)(nil).GetItemStructure), ctx, countryID, itemID)
}
