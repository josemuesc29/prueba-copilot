// Code generated by MockGen. DO NOT EDIT.
// Source: structure.go
//
// Generated by this command:
//
//	mockgen -source=structure.go -destination=../../../../../test/mocks/structure/domain/ports/out/structure_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	context "context"
	model "ftd-td-catalog-item-read-services/internal/structure/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockItemStructureRepository is a mock of ItemStructureRepository interface.
type MockItemStructureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemStructureRepositoryMockRecorder
	isgomock struct{}
}

// MockItemStructureRepositoryMockRecorder is the mock recorder for MockItemStructureRepository.
type MockItemStructureRepositoryMockRecorder struct {
	mock *MockItemStructureRepository
}

// NewMockItemStructureRepository creates a new mock instance.
func NewMockItemStructureRepository(ctrl *gomock.Controller) *MockItemStructureRepository {
	mock := &MockItemStructureRepository{ctrl: ctrl}
	mock.recorder = &MockItemStructureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemStructureRepository) EXPECT() *MockItemStructureRepositoryMockRecorder {
	return m.recorder
}

// GetItemStructure mocks base method.
func (m *MockItemStructureRepository) GetItemStructure(ctx context.Context, countryID string) ([]model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemStructure", ctx, countryID)
	ret0, _ := ret[0].([]model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemStructure indicates an expected call of GetItemStructure.
func (mr *MockItemStructureRepositoryMockRecorder) GetItemStructure(ctx, countryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemStructure", reflect.TypeOf((*MockItemStructureRepository)(nil).GetItemStructure), ctx, countryID)
}
