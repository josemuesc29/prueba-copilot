// Code generated by MockGen. DO NOT EDIT.
// Source: best_seller.go
//
// Generated by this command:
//
//	mockgen -source=best_seller.go -destination=../../../../../test/mocks/best-seller/infra/api/groups/best_seller_mock.go
//

// Package mock_groups is a generated GoMock package.
package mock_groups

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockBestSeller is a mock of BestSeller interface.
type MockBestSeller struct {
	ctrl     *gomock.Controller
	recorder *MockBestSellerMockRecorder
}

// MockBestSellerMockRecorder is the mock recorder for MockBestSeller.
type MockBestSellerMockRecorder struct {
	mock *MockBestSeller
}

// NewMockBestSeller creates a new mock instance.
func NewMockBestSeller(ctrl *gomock.Controller) *MockBestSeller {
	mock := &MockBestSeller{ctrl: ctrl}
	mock.recorder = &MockBestSellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBestSeller) EXPECT() *MockBestSellerMockRecorder {
	return m.recorder
}

// Source mocks base method.
func (m *MockBestSeller) Source(rg *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Source", rg)
}

// Source indicates an expected call of Source.
func (mr *MockBestSellerMockRecorder) Source(rg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockBestSeller)(nil).Source), rg)
}
