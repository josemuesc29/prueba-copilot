// Code generated by MockGen. DO NOT EDIT.
// Source: best_seller.go
//
// Generated by this command:
//
//	mockgen -source=best_seller.go -destination=../../../../../test/mocks/best-seller/domain/ports/out/best_seller_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	model "ftd-td-catalog-item-read-services/internal/best-seller/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBestSellerOutPort is a mock of BestSellerOutPort interface.
type MockBestSellerOutPort struct {
	ctrl     *gomock.Controller
	recorder *MockBestSellerOutPortMockRecorder
	isgomock struct{}
}

// MockBestSellerOutPortMockRecorder is the mock recorder for MockBestSellerOutPort.
type MockBestSellerOutPortMockRecorder struct {
	mock *MockBestSellerOutPort
}

// NewMockBestSellerOutPort creates a new mock instance.
func NewMockBestSellerOutPort(ctrl *gomock.Controller) *MockBestSellerOutPort {
	mock := &MockBestSellerOutPort{ctrl: ctrl}
	mock.recorder = &MockBestSellerOutPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBestSellerOutPort) EXPECT() *MockBestSellerOutPortMockRecorder {
	return m.recorder
}

// GetBestSellerDepartment mocks base method.
func (m *MockBestSellerOutPort) GetBestSellerDepartment(countryID, departmentID string) (*[]model.BestSellerDepartmentEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestSellerDepartment", countryID, departmentID)
	ret0, _ := ret[0].(*[]model.BestSellerDepartmentEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBestSellerDepartment indicates an expected call of GetBestSellerDepartment.
func (mr *MockBestSellerOutPortMockRecorder) GetBestSellerDepartment(countryID, departmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestSellerDepartment", reflect.TypeOf((*MockBestSellerOutPort)(nil).GetBestSellerDepartment), countryID, departmentID)
}
