// Code generated by MockGen. DO NOT EDIT.
// Source: item_seo.go
//
// Generated by this command:
//
//	mockgen -source=item_seo.go -destination=../../../../../test/mocks/shared/domain/ports/out/item_seo_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	model "ftd-td-catalog-item-read-services/internal/shared/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockItemSeo is a mock of ItemSeo interface.
type MockItemSeo struct {
	ctrl     *gomock.Controller
	recorder *MockItemSeoMockRecorder
	isgomock struct{}
}

// MockItemSeoMockRecorder is the mock recorder for MockItemSeo.
type MockItemSeoMockRecorder struct {
	mock *MockItemSeo
}

// NewMockItemSeo creates a new mock instance.
func NewMockItemSeo(ctrl *gomock.Controller) *MockItemSeo {
	mock := &MockItemSeo{ctrl: ctrl}
	mock.recorder = &MockItemSeoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemSeo) EXPECT() *MockItemSeoMockRecorder {
	return m.recorder
}

// GetItemSeo mocks base method.
func (m *MockItemSeo) GetItemSeo(itemID int64, countryID string) (*model.ItemSeo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemSeo", itemID, countryID)
	ret0, _ := ret[0].(*model.ItemSeo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemSeo indicates an expected call of GetItemSeo.
func (mr *MockItemSeoMockRecorder) GetItemSeo(itemID, countryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemSeo", reflect.TypeOf((*MockItemSeo)(nil).GetItemSeo), itemID, countryID)
}
