// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -destination=../../../../../test/mocks/shared/domain/ports/out/config_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	model "ftd-td-catalog-item-read-services/internal/shared/domain/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigOutPort is a mock of ConfigOutPort interface.
type MockConfigOutPort struct {
	ctrl     *gomock.Controller
	recorder *MockConfigOutPortMockRecorder
}

// MockConfigOutPortMockRecorder is the mock recorder for MockConfigOutPort.
type MockConfigOutPortMockRecorder struct {
	mock *MockConfigOutPort
}

// NewMockConfigOutPort creates a new mock instance.
func NewMockConfigOutPort(ctrl *gomock.Controller) *MockConfigOutPort {
	mock := &MockConfigOutPort{ctrl: ctrl}
	mock.recorder = &MockConfigOutPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigOutPort) EXPECT() *MockConfigOutPortMockRecorder {
	return m.recorder
}

// GetConfigBestSeller mocks base method.
func (m *MockConfigOutPort) GetConfigBestSeller(ctx *gin.Context, countryID, property string) (model.ConfigBestSeller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigBestSeller", ctx, countryID, property)
	ret0, _ := ret[0].(model.ConfigBestSeller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigBestSeller indicates an expected call of GetConfigBestSeller.
func (mr *MockConfigOutPortMockRecorder) GetConfigBestSeller(ctx, countryID, property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigBestSeller", reflect.TypeOf((*MockConfigOutPort)(nil).GetConfigBestSeller), ctx, countryID, property)
}
