// Code generated by MockGen. DO NOT EDIT.
// Source: total_stock.go
//
// Generated by this command:
//
//	mockgen -source=total_stock.go -destination=../../../../../test/mocks/total-stock/domain/ports/in/total_stock_mock.go
//

// Package mock_in is a generated GoMock package.
package mock_in

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockTotalStock is a mock of TotalStock interface.
type MockTotalStock struct {
	ctrl     *gomock.Controller
	recorder *MockTotalStockMockRecorder
	isgomock struct{}
}

// MockTotalStockMockRecorder is the mock recorder for MockTotalStock.
type MockTotalStockMockRecorder struct {
	mock *MockTotalStock
}

// NewMockTotalStock creates a new mock instance.
func NewMockTotalStock(ctrl *gomock.Controller) *MockTotalStock {
	mock := &MockTotalStock{ctrl: ctrl}
	mock.recorder = &MockTotalStockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTotalStock) EXPECT() *MockTotalStockMockRecorder {
	return m.recorder
}

// GetTotalStockByItem mocks base method.
func (m *MockTotalStock) GetTotalStockByItem(c *gin.Context, countryID, itemID string, storeIDs []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalStockByItem", c, countryID, itemID, storeIDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalStockByItem indicates an expected call of GetTotalStockByItem.
func (mr *MockTotalStockMockRecorder) GetTotalStockByItem(c, countryID, itemID, storeIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalStockByItem", reflect.TypeOf((*MockTotalStock)(nil).GetTotalStockByItem), c, countryID, itemID, storeIDs)
}
