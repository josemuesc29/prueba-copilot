// Code generated by MockGen. DO NOT EDIT.
// Source: total_stock.go
//
// Generated by this command:
//
//	mockgen -source=total_stock.go -destination=../../../../../test/mocks/total-stock/domain/ports/out/total_stock_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTotalStockOutPort is a mock of TotalStockOutPort interface.
type MockTotalStockOutPort struct {
	ctrl     *gomock.Controller
	recorder *MockTotalStockOutPortMockRecorder
	isgomock struct{}
}

// MockTotalStockOutPortMockRecorder is the mock recorder for MockTotalStockOutPort.
type MockTotalStockOutPortMockRecorder struct {
	mock *MockTotalStockOutPort
}

// NewMockTotalStockOutPort creates a new mock instance.
func NewMockTotalStockOutPort(ctrl *gomock.Controller) *MockTotalStockOutPort {
	mock := &MockTotalStockOutPort{ctrl: ctrl}
	mock.recorder = &MockTotalStockOutPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTotalStockOutPort) EXPECT() *MockTotalStockOutPortMockRecorder {
	return m.recorder
}

// GetStockByItemAndStores mocks base method.
func (m *MockTotalStockOutPort) GetStockByItemAndStores(countryID, itemID string, storeIDs []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockByItemAndStores", countryID, itemID, storeIDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockByItemAndStores indicates an expected call of GetStockByItemAndStores.
func (mr *MockTotalStockOutPortMockRecorder) GetStockByItemAndStores(countryID, itemID, storeIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockByItemAndStores", reflect.TypeOf((*MockTotalStockOutPort)(nil).GetStockByItemAndStores), countryID, itemID, storeIDs)
}
