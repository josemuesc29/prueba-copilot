// Code generated by MockGen. DO NOT EDIT.
// Source: products_related.go
//
// Generated by this command:
//
//	mockgen -source=products_related.go -destination=../../../../../test/mocks/products-related/infra/api/groups/products_related_mock.go
//

// Package mock_groups is a generated GoMock package.
package mock_groups

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsRelatedGroup is a mock of ProductsRelatedGroup interface.
type MockProductsRelatedGroup struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRelatedGroupMockRecorder
}

// MockProductsRelatedGroupMockRecorder is the mock recorder for MockProductsRelatedGroup.
type MockProductsRelatedGroupMockRecorder struct {
	mock *MockProductsRelatedGroup
}

// NewMockProductsRelatedGroup creates a new mock instance.
func NewMockProductsRelatedGroup(ctrl *gomock.Controller) *MockProductsRelatedGroup {
	mock := &MockProductsRelatedGroup{ctrl: ctrl}
	mock.recorder = &MockProductsRelatedGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRelatedGroup) EXPECT() *MockProductsRelatedGroupMockRecorder {
	return m.recorder
}

// Source mocks base method.
func (m *MockProductsRelatedGroup) Source(rg *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Source", rg)
}

// Source indicates an expected call of Source.
func (mr *MockProductsRelatedGroupMockRecorder) Source(rg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockProductsRelatedGroup)(nil).Source), rg)
}
