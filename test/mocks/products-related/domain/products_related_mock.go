// Code generated by MockGen. DO NOT EDIT.
// Source: products_related.go
//
// Generated by this command:
//
//	mockgen -source=products_related.go -destination=../../../../../test/mocks/products-related/domain/products_related_mock.go -package=domain
//

// Package domain is a generated GoMock package.
package domain

import (
	model "ftd-td-catalog-item-read-services/internal/products-related/domain/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsRelated is a mock of ProductsRelated interface.
type MockProductsRelated struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRelatedMockRecorder
	isgomock struct{}
}

// MockProductsRelatedMockRecorder is the mock recorder for MockProductsRelated.
type MockProductsRelatedMockRecorder struct {
	mock *MockProductsRelated
}

// NewMockProductsRelated creates a new mock instance.
func NewMockProductsRelated(ctrl *gomock.Controller) *MockProductsRelated {
	mock := &MockProductsRelated{ctrl: ctrl}
	mock.recorder = &MockProductsRelatedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRelated) EXPECT() *MockProductsRelatedMockRecorder {
	return m.recorder
}

// GetRelatedItems mocks base method.
func (m *MockProductsRelated) GetRelatedItems(ctx *gin.Context, countryID, itemID string) ([]model.ProductsRelatedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelatedItems", ctx, countryID, itemID)
	ret0, _ := ret[0].([]model.ProductsRelatedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelatedItems indicates an expected call of GetRelatedItems.
func (mr *MockProductsRelatedMockRecorder) GetRelatedItems(ctx, countryID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelatedItems", reflect.TypeOf((*MockProductsRelated)(nil).GetRelatedItems), ctx, countryID, itemID)
}
