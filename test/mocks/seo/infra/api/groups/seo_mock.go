// Code generated by MockGen. DO NOT EDIT.
// Source: seo.go
//
// Generated by this command:
//
//	mockgen -source=seo.go -destination=../../../../../test/mocks/seo/infra/api/groups/seo_mock.go
//

// Package mock_groups is a generated GoMock package.
package mock_groups

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
	isgomock struct{}
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// Source mocks base method.
func (m *MockGroup) Source(rg *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Source", rg)
}

// Source indicates an expected call of Source.
func (mr *MockGroupMockRecorder) Source(rg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockGroup)(nil).Source), rg)
}
