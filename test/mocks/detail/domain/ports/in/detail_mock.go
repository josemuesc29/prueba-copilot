// Code generated by MockGen. DO NOT EDIT.
// Source: detail.go
//
// Generated by this command:
//
//	mockgen -source=detail.go -destination=../../../../../test/mocks/detail/domain/ports/in/detail_mock.go
//

// Package mock_in is a generated GoMock package.
package mock_in

import (
	model "ftd-td-catalog-item-read-services/internal/detail/domain/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockDetailInPort is a mock of DetailInPort interface.
type MockDetailInPort struct {
	ctrl     *gomock.Controller
	recorder *MockDetailInPortMockRecorder
}

// MockDetailInPortMockRecorder is the mock recorder for MockDetailInPort.
type MockDetailInPortMockRecorder struct {
	mock *MockDetailInPort
}

// NewMockDetailInPort creates a new mock instance.
func NewMockDetailInPort(ctrl *gomock.Controller) *MockDetailInPort {
	mock := &MockDetailInPort{ctrl: ctrl}
	mock.recorder = &MockDetailInPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetailInPort) EXPECT() *MockDetailInPortMockRecorder {
	return m.recorder
}

// GetDetailProduct mocks base method.
func (m *MockDetailInPort) GetDetailProduct(c *gin.Context) (model.ItemDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailProduct", c)
	ret0, _ := ret[0].(model.ItemDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailProduct indicates an expected call of GetDetailProduct.
func (mr *MockDetailInPortMockRecorder) GetDetailProduct(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailProduct", reflect.TypeOf((*MockDetailInPort)(nil).GetDetailProduct), c)
}
