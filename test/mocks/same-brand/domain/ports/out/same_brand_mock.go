// Code generated by MockGen. DO NOT EDIT.
// Source: same_brand.go
//
// Generated by this command:
//
//	mockgen -source=same_brand.go -destination=../../../../../test/mocks/same-brand/domain/ports/out/same_brand_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	context "context"
	model "ftd-td-catalog-item-read-services/internal/same-brand/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSameBrandRepository is a mock of SameBrandRepository interface.
type MockSameBrandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSameBrandRepositoryMockRecorder
	isgomock struct{}
}

// MockSameBrandRepositoryMockRecorder is the mock recorder for MockSameBrandRepository.
type MockSameBrandRepositoryMockRecorder struct {
	mock *MockSameBrandRepository
}

// NewMockSameBrandRepository creates a new mock instance.
func NewMockSameBrandRepository(ctrl *gomock.Controller) *MockSameBrandRepository {
	mock := &MockSameBrandRepository{ctrl: ctrl}
	mock.recorder = &MockSameBrandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSameBrandRepository) EXPECT() *MockSameBrandRepositoryMockRecorder {
	return m.recorder
}

// GetItemBrand mocks base method.
func (m *MockSameBrandRepository) GetItemBrand(ctx context.Context, itemID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemBrand", ctx, itemID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemBrand indicates an expected call of GetItemBrand.
func (mr *MockSameBrandRepositoryMockRecorder) GetItemBrand(ctx, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemBrand", reflect.TypeOf((*MockSameBrandRepository)(nil).GetItemBrand), ctx, itemID)
}

// GetItemsBySameBrand mocks base method.
func (m *MockSameBrandRepository) GetItemsBySameBrand(ctx context.Context, countryID, brand, city string) ([]model.SameBrandItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsBySameBrand", ctx, countryID, brand, city)
	ret0, _ := ret[0].([]model.SameBrandItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsBySameBrand indicates an expected call of GetItemsBySameBrand.
func (mr *MockSameBrandRepositoryMockRecorder) GetItemsBySameBrand(ctx, countryID, brand, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsBySameBrand", reflect.TypeOf((*MockSameBrandRepository)(nil).GetItemsBySameBrand), ctx, countryID, brand, city)
}
