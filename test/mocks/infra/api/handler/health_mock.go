// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/api/handler/health.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/api/handler/health.go -destination=test/mocks/infra/api/handler/health_mock.go -package=mocks_handler
//

// Package mocks_handler is a generated GoMock package.
package mocks_handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockHealth is a mock of Health interface.
type MockHealth struct {
	ctrl     *gomock.Controller
	recorder *MockHealthMockRecorder
	isgomock struct{}
}

// MockHealthMockRecorder is the mock recorder for MockHealth.
type MockHealthMockRecorder struct {
	mock *MockHealth
}

// NewMockHealth creates a new mock instance.
func NewMockHealth(ctrl *gomock.Controller) *MockHealth {
	mock := &MockHealth{ctrl: ctrl}
	mock.recorder = &MockHealthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealth) EXPECT() *MockHealthMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockHealth) HealthCheck(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", c)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockHealthMockRecorder) HealthCheck(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockHealth)(nil).HealthCheck), c)
}
