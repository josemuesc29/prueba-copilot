// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/api/groups/health.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/api/groups/health.go -destination=test/mocks/infra/api/groups/health_mock.go -package=mocks_groups
//

// Package mocks_groups is a generated GoMock package.
package mocks_groups

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockHealthGroup is a mock of HealthGroup interface.
type MockHealthGroup struct {
	ctrl     *gomock.Controller
	recorder *MockHealthGroupMockRecorder
	isgomock struct{}
}

// MockHealthGroupMockRecorder is the mock recorder for MockHealthGroup.
type MockHealthGroupMockRecorder struct {
	mock *MockHealthGroup
}

// NewMockHealthGroup creates a new mock instance.
func NewMockHealthGroup(ctrl *gomock.Controller) *MockHealthGroup {
	mock := &MockHealthGroup{ctrl: ctrl}
	mock.recorder = &MockHealthGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthGroup) EXPECT() *MockHealthGroupMockRecorder {
	return m.recorder
}

// Source mocks base method.
func (m *MockHealthGroup) Source(rg *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Source", rg)
}

// Source indicates an expected call of Source.
func (mr *MockHealthGroupMockRecorder) Source(rg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockHealthGroup)(nil).Source), rg)
}
