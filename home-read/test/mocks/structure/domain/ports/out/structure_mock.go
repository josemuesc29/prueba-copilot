// Code generated by MockGen. DO NOT EDIT.
// Source: structure.go
//
// Generated by this command:
//
//	mockgen -source=structure.go -destination=../../../../../test/mocks/structure/domain/ports/out/structure_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	context "context"
	model "ftd-td-home-read-services/internal/structure/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStructureRepository is a mock of StructureRepository interface.
type MockStructureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStructureRepositoryMockRecorder
	isgomock struct{}
}

// MockStructureRepositoryMockRecorder is the mock recorder for MockStructureRepository.
type MockStructureRepositoryMockRecorder struct {
	mock *MockStructureRepository
}

// NewMockStructureRepository creates a new mock instance.
func NewMockStructureRepository(ctrl *gomock.Controller) *MockStructureRepository {
	mock := &MockStructureRepository{ctrl: ctrl}
	mock.recorder = &MockStructureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStructureRepository) EXPECT() *MockStructureRepositoryMockRecorder {
	return m.recorder
}

// GetHomeStructure mocks base method.
func (m *MockStructureRepository) GetHomeStructure(ctx context.Context, countryID string, platform model.Platform) ([]model.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeStructure", ctx, countryID, platform)
	ret0, _ := ret[0].([]model.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeStructure indicates an expected call of GetHomeStructure.
func (mr *MockStructureRepositoryMockRecorder) GetHomeStructure(ctx, countryID, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeStructure", reflect.TypeOf((*MockStructureRepository)(nil).GetHomeStructure), ctx, countryID, platform)
}
