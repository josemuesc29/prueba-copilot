// Code generated by MockGen. DO NOT EDIT.
// Source: customer.go
//
// Generated by this command:
//
//	mockgen -source=customer.go -destination=../../../../../test/mocks/structure/domain/ports/out/customer_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	context "context"
	model "ftd-td-home-read-services/internal/structure/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetCustomerByID mocks base method.
func (m *MockCustomerRepository) GetCustomerByID(ctx context.Context, countryID, customerID string) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", ctx, countryID, customerID)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerByID(ctx, countryID, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerByID), ctx, countryID, customerID)
}
