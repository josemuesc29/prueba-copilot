// Code generated by MockGen. DO NOT EDIT.
// Source: offerCms.go
//
// Generated by this command:
//
//	mockgen -source=offerCms.go -destination=../../../../../test/mocks/offer/domain/ports/out/offer_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	model "ftd-td-home-read-services/internal/offer/domain/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockOfferCmsOutPort is a mock of OfferCmsOutPort interface.
type MockOfferCmsOutPort struct {
	ctrl     *gomock.Controller
	recorder *MockOfferCmsOutPortMockRecorder
	isgomock struct{}
}

// MockOfferCmsOutPortMockRecorder is the mock recorder for MockOfferCmsOutPort.
type MockOfferCmsOutPortMockRecorder struct {
	mock *MockOfferCmsOutPort
}

// NewMockOfferCmsOutPort creates a new mock instance.
func NewMockOfferCmsOutPort(ctrl *gomock.Controller) *MockOfferCmsOutPort {
	mock := &MockOfferCmsOutPort{ctrl: ctrl}
	mock.recorder = &MockOfferCmsOutPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferCmsOutPort) EXPECT() *MockOfferCmsOutPortMockRecorder {
	return m.recorder
}

// GetFlashOffer mocks base method.
func (m *MockOfferCmsOutPort) GetFlashOffer(c *gin.Context, countryId string) ([]model.FlashOffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlashOffer", c, countryId)
	ret0, _ := ret[0].([]model.FlashOffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlashOffer indicates an expected call of GetFlashOffer.
func (mr *MockOfferCmsOutPortMockRecorder) GetFlashOffer(c, countryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlashOffer", reflect.TypeOf((*MockOfferCmsOutPort)(nil).GetFlashOffer), c, countryId)
}
