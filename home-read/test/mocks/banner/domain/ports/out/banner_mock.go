// Code generated by MockGen. DO NOT EDIT.
// Source: bannerCms.go
//
// Generated by this command:
//
//	mockgen -source=bannerCms.go -destination=../../../../../test/mocks/banner/domain/ports/out/banner_mock.go
//

// Package mock_out is a generated GoMock package.
package mock_out

import (
	model "ftd-td-home-read-services/internal/banner/domain/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockBannerCmsOutPort is a mock of BannerCmsOutPort interface.
type MockBannerCmsOutPort struct {
	ctrl     *gomock.Controller
	recorder *MockBannerCmsOutPortMockRecorder
	isgomock struct{}
}

// MockBannerCmsOutPortMockRecorder is the mock recorder for MockBannerCmsOutPort.
type MockBannerCmsOutPortMockRecorder struct {
	mock *MockBannerCmsOutPort
}

// NewMockBannerCmsOutPort creates a new mock instance.
func NewMockBannerCmsOutPort(ctrl *gomock.Controller) *MockBannerCmsOutPort {
	mock := &MockBannerCmsOutPort{ctrl: ctrl}
	mock.recorder = &MockBannerCmsOutPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannerCmsOutPort) EXPECT() *MockBannerCmsOutPortMockRecorder {
	return m.recorder
}

// GetBanners mocks base method.
func (m *MockBannerCmsOutPort) GetBanners(c *gin.Context, countryId string) ([]model.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanners", c, countryId)
	ret0, _ := ret[0].([]model.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanners indicates an expected call of GetBanners.
func (mr *MockBannerCmsOutPortMockRecorder) GetBanners(c, countryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanners", reflect.TypeOf((*MockBannerCmsOutPort)(nil).GetBanners), c, countryId)
}
